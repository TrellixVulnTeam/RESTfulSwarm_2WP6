{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import pymongo as mg\n",
    "from matplotlib import pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "# return a mongodb client\n",
    "def get_client(usr, pwd, address, port='27017'):\n",
    "    url = 'mongodb://%s:%s@%s:%s/RESTfulSwarmDB' % (usr, pwd, address, port)\n",
    "    return mg.MongoClient(url)\n",
    "\n",
    "\n",
    "# return a database object\n",
    "def get_db(client, db_name):\n",
    "    return client[db_name]\n",
    "\n",
    "\n",
    "# return a collection cursor object\n",
    "def get_col(db, col_name):\n",
    "    return db[col_name]\n",
    "\n",
    "\n",
    "# query data in a job collection\n",
    "def query_col(col):\n",
    "    return list(col.find({}))[0]\n",
    "\n",
    "\n",
    "# get a list of job collection name\n",
    "def get_all_cols(db):\n",
    "    return db.collection_names()\n",
    "\n",
    "\n",
    "def get_time(data):\n",
    "    result = {'waiting_time': 0, 'execution_time': 0, 'total_time': 0}\n",
    "    if len(data) == 0:\n",
    "        return None\n",
    "    submit_time = data['submit_time']\n",
    "    start_time = data['start_time']\n",
    "    if start_time != 0:\n",
    "        end_time = data['end_time']\n",
    "        if end_time == 0:\n",
    "            waiting_time = start_time - submit_time\n",
    "            result['waiting_time'] = waiting_time\n",
    "        else:\n",
    "            execution_time = end_time - start_time\n",
    "            result['execution_time'] = execution_time\n",
    "            total_time = end_time - submit_time\n",
    "            result['total_time'] = total_time\n",
    "    return result\n",
    "\n",
    "\n",
    "def plot_graph(db):\n",
    "    cols = get_all_cols(db)\n",
    "    waiting_time = []\n",
    "    execution_time = []\n",
    "    total_time = []\n",
    "    jobs = []\n",
    "    for col in cols:\n",
    "        if 'job' not in col:\n",
    "            continue\n",
    "        col_obj = get_col(db, col)\n",
    "        job_info = query_col(col_obj)\n",
    "        result = get_time(job_info)\n",
    "        if result['waiting_time'] != 0:\n",
    "            waiting_time.append(result['waiting_time'])\n",
    "        if result['execution_time'] != 0:\n",
    "            execution_time.append(result['execution_time'])\n",
    "        if total_time != 0:\n",
    "            total_time.append(result['total_time'])\n",
    "        jobs.append(col)\n",
    "    \n",
    "    def plot_waiting_time():\n",
    "        if len(waiting_time) != 0:\n",
    "            wt = pd.Series(waiting_time, index=jobs)\n",
    "            wt.plot.bar(figsize=(10, 5))\n",
    "            plt.xlabel('Job')\n",
    "            plt.ylabel('Waiting Time')\n",
    "            plt.title('Job Waiting Time')\n",
    "    \n",
    "    def plot_execution_time():\n",
    "        if len(waiting_time) != 0:\n",
    "            et = pd.Series(execution_time, index=jobs)\n",
    "            et.plot.bar(figsize=(10, 5))\n",
    "            plt.xlabel('Job')\n",
    "            plt.ylabel('Execution Time')\n",
    "            plt.title('Job Execution Time')\n",
    "    \n",
    "    def plot_total_time():\n",
    "        if len(total_time) != 0 and len(jobs) != 0:\n",
    "            tt = pd.Series(total_time, index=jobs)\n",
    "            tt.plot.bar(figsize=(10, 5))\n",
    "            plt.xlabel('Job')\n",
    "            plt.ylabel('Total Time')\n",
    "            plt.title('Job Total Time')\n",
    "    \n",
    "    plot_waiting_time()\n",
    "    plot_execution_time()\n",
    "    plot_total_time()\n",
    "\n",
    "\n",
    "def main():\n",
    "    client = get_client('admin', 'kzw', '129.59.107.139')\n",
    "    db = get_db(client, 'RESTfulSwarmDB')\n",
    "    plot_graph(db)\n",
    "\n",
    "\n",
    "main()"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 0
}
